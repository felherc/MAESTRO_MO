/**
 * Copyright 2018 Felipe Hernández
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the 
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */

package maestro_mo.solution;

import java.util.ArrayList;

import maestro_mo.Optimizer;

/**
 * This class contains the generated discrete and continuous values of a candidate solution to be
 * analyzed
 * @author Felipe Hernández
 */
public class SolutionRoot 
{

	// --------------------------------------------------------------------------------------------
	// Attributes
	// --------------------------------------------------------------------------------------------
	
	/**
	 * The index of the generator algorithm that created the solution
	 */
	private int genIndex;
	
	/**
	 * List with the values of the solution for the discrete variables
	 */
	private ArrayList<Integer> discValues;
	
	/**
	 * List with the values of the solution for the continuous variables
	 */
	private ArrayList<Double> contValues;
	
	/**
	 * An empty string ("") in most cases. Not empty if the root was defined by the user and a
	 * special label should be used to identify the resulting solution.
	 */
	private String label;
	
	/**
	 * Additional information defined by the user for predefined roots. <code>null</code> if no 
	 * such information exists or if this root was generated by the optimizer.
	 */
	private Object extra;
	
	// --------------------------------------------------------------------------------------------
	// Constructor
	// --------------------------------------------------------------------------------------------
	
	public SolutionRoot(ArrayList<Integer> discValues, ArrayList<Double> contValues)
	{
		this.genIndex	= Optimizer.GEN_INDEX_RANDOM;
		this.discValues	= discValues;
		this.contValues	= contValues;
		this.label		= "";
		this.extra		= null;
	}
	
	/**
	 * Creates a new solution root
	 * @param label			{@link #label}
	 * @param discValues	{@link #discValues}
	 * @param contValues	{@link #contValues}
	 * @param extra			{@link #extra}
	 */
	public SolutionRoot(String label, ArrayList<Integer> discValues, ArrayList<Double> contValues, 
						Object extra)
	{
		this.genIndex	= Optimizer.GEN_INDEX_RANDOM;
		this.discValues	= discValues;
		this.contValues	= contValues;
		this.label		= label;
		this.extra		= extra;
	}
	
	// --------------------------------------------------------------------------------------------
	// Methods
	// --------------------------------------------------------------------------------------------
	
	/**
	 * @return {@link #genIndex}
	 */
	public int getGenIndex() 
	{
		return genIndex;
	}

	/**
	 * @param genIndex {@link #genIndex}
	 */
	public void setGenIndex(int genIndex) 
	{
		this.genIndex = genIndex;
	}

	/**
	 * @return {@link #label}
	 */
	public String getLabel()
	{
		return label;
	}
	
	/**
	 * @return {@link #discValues}
	 */
	public ArrayList<Integer> getDiscValues() 
	{
		return discValues;
	}

	/**
	 * @return {@link #contValues}
	 */
	public ArrayList<Double> getContValues() 
	{
		return contValues;
	}

	/**
	 * @return {@link #extra}
	 */
	public Object getExtra()
	{
		return extra;
	}
	
}